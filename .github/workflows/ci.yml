name: SierraSam Build

on: [push]

env:
  DOTNET_VERSION: 7.x.x

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:
      runtimes: ${{ steps.runtimes.outputs.runtimes }}
    steps:
      - name: Set Runtimes
        id: runtimes
        run: |
          [[ ${{ github.ref_name }} == main ]] && \
          RUNTIMES="[\"win-x64\", \"linux-x64\", \"linux-arm64\", \"osx-x64\", \"osx-arm64\"]" || \
          RUNTIMES="[\"linux-x64\"]"
          echo $RUNTIMES
          echo "runtimes=$RUNTIMES" >> $GITHUB_OUTPUT
        shell: bash

  build:
    needs: setup
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        runtime: ${{ fromJson(needs.setup.outputs.runtimes) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: ./SierraSam/packages.lock.json
      - name: Restore Dependencies
        run: dotnet restore --locked-mode
      - name: Build
        run: |
          dotnet build ./SierraSam/SierraSam.csproj \
          --configuration Release \
          --no-restore \
          --runtime ${{ matrix.runtime }} \
          --self-contained
      - name: Cache Build Artifacts
        uses: actions/cache@v3
        with:
          path: |
            ./*/bin/
            ./*/obj/
          key: ${{ matrix.runtime }}-build-${{ github.sha }}

  test:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: ./SierraSam/packages.lock.json
      - name: Restore Dependencies
        run: dotnet restore --locked-mode
      - name: Install Postgres ODBC Driver
        if: success()
        run: |
          sudo apt-get update
          sudo apt-get install -y odbc-postgresql
      - name: Install MySQL ODBC Driver
        if: success()
        run: |
          wget https://dev.mysql.com/get/Downloads/Connector-ODBC/8.2/mysql-connector-odbc_8.2.0-1ubuntu22.04_amd64.deb
          wget https://dev.mysql.com/get/Downloads/MySQL-8.2/mysql-community-client-plugins_8.2.0-1ubuntu22.04_amd64.deb
          sudo dpkg -i mysql-community-client-plugins_8.2.0-1ubuntu22.04_amd64.deb mysql-connector-odbc_8.2.0-1ubuntu22.04_amd64.deb
      - name: Install Oracle ODBC Driver
        if: success()
        run: |
          wget https://download.oracle.com/otn_software/linux/instantclient/2111000/instantclient-basiclite-linux.x64-21.11.0.0.0dbru.zip
          wget https://download.oracle.com/otn_software/linux/instantclient/2111000/instantclient-odbc-linux.x64-21.11.0.0.0dbru.zip
          unzip instantclient-basiclite-linux.x64-21.11.0.0.0dbru.zip -d /opt/oracle
          unzip instantclient-odbc-linux.x64-21.11.0.0.0dbru.zip -d /opt/oracle
          sudo apt-get install -y glibc-source libaio1
          sudo bash /opt/oracle/instantclient_21_11/odbc_update_ini.sh "/" "/opt/oracle/instantclient_21_11" "Oracle 21 ODBC driver" "OracleODBC-21" "/etc/odbc.ini"
      - name: Login to Oracle Container Repository
        uses: docker/login-action@v2
        with:
          registry: container-registry.oracle.com
          username: ${{ secrets.OCR_USER }}
          password: ${{ secrets.OCR_PWD }}
      - name: Run Tests
        env:
          LD_LIBRARY_PATH: /opt/oracle/instantclient_21_11
        if: success()
        run: dotnet test --configuration Release --verbosity normal --logger trx
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: test-results
          path: ./**/TestResults/*.trx
          retention-days: 30

  publish:
    if: ${{ github.ref_name == 'main' }}
    needs: [setup, test]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        runtime: ${{ fromJson(needs.setup.outputs.runtimes) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: ./SierraSam/packages.lock.json
      - name: Restore Dependencies
        run: dotnet restore --locked-mode
      - name: Restore Build Artifacts
        uses: actions/cache@v3
        with:
          path: |
            ./*/bin/
            ./*/obj/
          key: ${{ matrix.runtime }}-build-${{ github.sha }}
      - name: Publish
        run: |
          dotnet publish ./SierraSam/SierraSam.csproj \
          --configuration Release \
          --no-build \
          --runtime ${{ matrix.runtime }} \
          --self-contained
      - name: Upload Artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: SierraSam-${{ matrix.runtime }}
          path: ./SierraSam/bin/Release/net7.0/${{ matrix.runtime }}/publish
